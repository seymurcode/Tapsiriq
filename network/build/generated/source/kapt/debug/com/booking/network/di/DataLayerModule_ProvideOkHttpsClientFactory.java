// Generated by Dagger (https://dagger.dev).
package com.booking.network.di;

import com.booking.network.interceptors.TokenInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("com.booking.network.di.FlightAnnotation")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DataLayerModule_ProvideOkHttpsClientFactory implements Factory<OkHttpClient> {
  private final Provider<TokenInjector> tokenInjectorProvider;

  public DataLayerModule_ProvideOkHttpsClientFactory(
      Provider<TokenInjector> tokenInjectorProvider) {
    this.tokenInjectorProvider = tokenInjectorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttpsClient(tokenInjectorProvider.get());
  }

  public static DataLayerModule_ProvideOkHttpsClientFactory create(
      Provider<TokenInjector> tokenInjectorProvider) {
    return new DataLayerModule_ProvideOkHttpsClientFactory(tokenInjectorProvider);
  }

  public static OkHttpClient provideOkHttpsClient(TokenInjector tokenInjector) {
    return Preconditions.checkNotNullFromProvides(DataLayerModule.INSTANCE.provideOkHttpsClient(tokenInjector));
  }
}
