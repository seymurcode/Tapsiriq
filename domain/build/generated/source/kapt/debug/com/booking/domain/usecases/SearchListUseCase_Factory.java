// Generated by Dagger (https://dagger.dev).
package com.booking.domain.usecases;

import com.booking.data.repository.FlightRepositoryInterface;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class SearchListUseCase_Factory implements Factory<SearchListUseCase> {
  private final Provider<FlightRepositoryInterface> repositoryProvider;

  public SearchListUseCase_Factory(Provider<FlightRepositoryInterface> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public SearchListUseCase get() {
    return newInstance(repositoryProvider.get());
  }

  public static SearchListUseCase_Factory create(
      Provider<FlightRepositoryInterface> repositoryProvider) {
    return new SearchListUseCase_Factory(repositoryProvider);
  }

  public static SearchListUseCase newInstance(FlightRepositoryInterface repository) {
    return new SearchListUseCase(repository);
  }
}
