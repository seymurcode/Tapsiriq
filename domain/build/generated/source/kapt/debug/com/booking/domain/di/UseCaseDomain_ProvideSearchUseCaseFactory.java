// Generated by Dagger (https://dagger.dev).
package com.booking.domain.di;

import com.booking.data.repository.FlightRepositoryInterface;
import com.booking.domain.usecases.SearchListUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class UseCaseDomain_ProvideSearchUseCaseFactory implements Factory<SearchListUseCase> {
  private final Provider<FlightRepositoryInterface> repositoryInterfaceProvider;

  public UseCaseDomain_ProvideSearchUseCaseFactory(
      Provider<FlightRepositoryInterface> repositoryInterfaceProvider) {
    this.repositoryInterfaceProvider = repositoryInterfaceProvider;
  }

  @Override
  public SearchListUseCase get() {
    return provideSearchUseCase(repositoryInterfaceProvider.get());
  }

  public static UseCaseDomain_ProvideSearchUseCaseFactory create(
      Provider<FlightRepositoryInterface> repositoryInterfaceProvider) {
    return new UseCaseDomain_ProvideSearchUseCaseFactory(repositoryInterfaceProvider);
  }

  public static SearchListUseCase provideSearchUseCase(
      FlightRepositoryInterface repositoryInterface) {
    return Preconditions.checkNotNullFromProvides(UseCaseDomain.INSTANCE.provideSearchUseCase(repositoryInterface));
  }
}
