// Generated by Dagger (https://dagger.dev).
package com.booking.flights.searchlist;

import com.booking.domain.mapper.SearchResponseToUIStateMapper;
import com.booking.domain.usecases.SearchListUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class SearchListViewModel_Factory implements Factory<SearchListViewModel> {
  private final Provider<SearchListUseCase> searchUseCaseProvider;

  private final Provider<SearchResponseToUIStateMapper> mapperProvider;

  public SearchListViewModel_Factory(Provider<SearchListUseCase> searchUseCaseProvider,
      Provider<SearchResponseToUIStateMapper> mapperProvider) {
    this.searchUseCaseProvider = searchUseCaseProvider;
    this.mapperProvider = mapperProvider;
  }

  @Override
  public SearchListViewModel get() {
    return newInstance(searchUseCaseProvider.get(), mapperProvider.get());
  }

  public static SearchListViewModel_Factory create(
      Provider<SearchListUseCase> searchUseCaseProvider,
      Provider<SearchResponseToUIStateMapper> mapperProvider) {
    return new SearchListViewModel_Factory(searchUseCaseProvider, mapperProvider);
  }

  public static SearchListViewModel newInstance(SearchListUseCase searchUseCase,
      SearchResponseToUIStateMapper mapper) {
    return new SearchListViewModel(searchUseCase, mapper);
  }
}
