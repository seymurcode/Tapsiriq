// Generated by Dagger (https://dagger.dev).
package com.booking.hotels;

import com.booking.domain.mapper.HotelsResponseToUIStateMapper;
import com.booking.domain.usecases.HotelListUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class HotelListViewModel_Factory implements Factory<HotelListViewModel> {
  private final Provider<HotelListUseCase> searchUseCaseProvider;

  private final Provider<HotelsResponseToUIStateMapper> mapperProvider;

  public HotelListViewModel_Factory(Provider<HotelListUseCase> searchUseCaseProvider,
      Provider<HotelsResponseToUIStateMapper> mapperProvider) {
    this.searchUseCaseProvider = searchUseCaseProvider;
    this.mapperProvider = mapperProvider;
  }

  @Override
  public HotelListViewModel get() {
    return newInstance(searchUseCaseProvider.get(), mapperProvider.get());
  }

  public static HotelListViewModel_Factory create(Provider<HotelListUseCase> searchUseCaseProvider,
      Provider<HotelsResponseToUIStateMapper> mapperProvider) {
    return new HotelListViewModel_Factory(searchUseCaseProvider, mapperProvider);
  }

  public static HotelListViewModel newInstance(HotelListUseCase searchUseCase,
      HotelsResponseToUIStateMapper mapper) {
    return new HotelListViewModel(searchUseCase, mapper);
  }
}
